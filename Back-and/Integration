package main

import (
	"log"
	"net/http"
	"math/rand"
	"strconv"
	"encoding/json"
	"github.com/gorilla/mux"
)

type Menu struct {
	ID	string	json:"id"
	Title string	json:"title"
	Category *Category json:"category"
}

type Organization struct {
	Restorans string json:"restorans"
}

var Food []Food

func getFoodList(w http.ResponseWriter, r *Http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	for _, item.ID == params["id"] {
		if item.ID == params["id"] {
			json.NewEncoder(w).Encode(item)
			return
		}
	}
	json.NewEncoder(w).Encode(&Food{})
}

func createFood(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	var food Food
	_ = json.NewDecoder(r.Body).Decode(&food)
	food.ID = strconv.Itoa(rand.Intn(1000000))
	foods = append(foods, food)
	json.NewEncoder(w).Encode(food)
}

func updateFoodList(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	for index, item := range food {
		if item.ID == params["id"] {
			food = append(food[:index], foods[index+1]...)
			var food Food
			_ = json.NewDecoder(r.Body).Decode(&food)
			food.ID = params["id"]
			foods = append(foods, food)
			json.NewEncoder(w).Encode(food)
			return
		}
	}
	json.NewEncoder(w).Encode(foods)
}

func deleteFood(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	for index, item := range foods {
		if item.ID == params["id"] {
			foods = append(foods[:index], foods[index+1:]...)
			break
		}
	}
	json.NewEncoder(w).Encode(books)
}

func main() {
	r := mux.NewRouter()
	foods = append(foods, Food{ID: "1", Title: "Пицца", Restorans: &Restorans{name: "Тунгуска"}})
	foods = append(foods, Food{ID: "1", Title: "Хачапури", Restorans: &Restorans{name: "Дзе"}})

	r.HandleFunc("/foods", getFoodList).Methods("GET")
	r.HandleFunc("/foods/{id}", getFoodList).Methods("GET")
	r.HandleFunc("/foods", createFood).Methods("POST")
	r.HandleFunc("/foods/{id}", updateFoodList).Methods("PUT")
	r.HandleFunc("/foods/{id}", deleteFood).Methods("DELETE")
	log.Fatal(http.ListenAndServe(":8000", r))
}